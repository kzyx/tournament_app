// This file was partly generated by quicktype.io (gets classes from JSON)
// I wrote a lot of the code though. Essentially, the JSON object retrieved
// from the GET request is turned into a Playoffs object. The PlayoffNode
// represents a node in the graph/tree generated from the Playoffs object.

import 'dart:convert';
import 'package:tournament_app/models/series.dart';

/// Generic class used by Team and Conference in the API's returned JSON
class LinkedObject {
  LinkedObject({
    required this.id,
    required this.name,
    required this.link,
  });

  int id;
  String name;
  String link;

  factory LinkedObject.fromRawJson(String str) =>
      LinkedObject.fromJson(json.decode(str));

  String toRawJson() => json.encode(toJson());

  factory LinkedObject.fromJson(Map<String, dynamic> json) {
    // These checks for null are needed because this object is used to
    // represent teams as well as conferences, and the conferences may have
    // no value for the name key
    // (e.g. for Stanley Cup Finals, they are NOT a West/East conf. series).
    return LinkedObject(
      id: (json["id"] == null) ? 0 : json["id"],
      name: (json["name"] == null) ? " " : json["name"],
      link: (json["link"] == null) ? " " : json["link"],
    );
  }

  Map<String, dynamic> toJson() => {
        "id": id,
        "name": name,
        "link": link,
      };
}

/// Represents the last game in the Playoff series
class CurrentGame {
  CurrentGame({
    required this.seriesSummary,
  });

  final SeriesSummary seriesSummary;

  factory CurrentGame.fromRawJson(String str) =>
      CurrentGame.fromJson(json.decode(str));

  String toRawJson() => json.encode(toJson());

  factory CurrentGame.fromJson(Map<String, dynamic> json) => CurrentGame(
        seriesSummary: SeriesSummary.fromJson(json["seriesSummary"]),
      );

  Map<String, dynamic> toJson() => {
        "seriesSummary": seriesSummary.toJson(),
      };
}

/// Represents one of the two teams in the Playoff series
class MatchupTeam {
  MatchupTeam({
    required this.team,
    required this.seed,
    required this.seriesRecord,
  });

  final LinkedObject team;
  final Seed seed;
  final SeriesRecord seriesRecord;

  factory MatchupTeam.fromRawJson(String str) =>
      MatchupTeam.fromJson(json.decode(str));

  String toRawJson() => json.encode(toJson());

  factory MatchupTeam.fromJson(Map<String, dynamic> json) => MatchupTeam(
        team: LinkedObject.fromJson(json["team"]),
        seed: Seed.fromJson(json["seed"]),
        seriesRecord: SeriesRecord.fromJson(json["seriesRecord"]),
      );

  Map<String, dynamic> toJson() => {
        "team": team.toJson(),
        "seed": seed.toJson(),
        "seriesRecord": seriesRecord.toJson(),
      };
}

/// Represents the seed of each MatchupTeam in the Playoff series
class Seed {
  Seed({
    required this.type,
    required this.rank,
    required this.isTop,
  });

  final String type;
  final int rank;
  final bool isTop;

  factory Seed.fromRawJson(String str) => Seed.fromJson(json.decode(str));

  String toRawJson() => json.encode(toJson());

  factory Seed.fromJson(Map<String, dynamic> json) => Seed(
        type: (json["type"] == null) ? "-1" : json["type"],
        rank: json["rank"],
        isTop: json["isTop"],
      );

  Map<String, dynamic> toJson() => {
        "type": type,
        "rank": rank,
        "isTop": isTop,
      };
}
