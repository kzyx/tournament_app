// This file was partly generated by quicktype.io (gets classes from JSON)
// I wrote a lot of the code though. Essentially, the JSON object retrieved
// from the GET request is turned into a Playoffs object. The PlayoffNode
// represents a node in the graph/tree generated from the Playoffs object.

import 'dart:convert';
import 'package:graphview/GraphView.dart';
import 'package:tournament_app/models/rounds.dart';
import 'package:tournament_app/models/series.dart';

/// Represents node in graph/tree generated using Playoffs object
class PlayoffNode extends Node {
  late Series series;

  PlayoffNode({required int id, required Series series}) : super.Id(id) {
    this.series = series;
  }
}

/// Represents tree of Playoff bracket
class Playoffs {
  Playoffs({
    required this.copyright,
    required this.id,
    required this.name,
    required this.season,
    required this.defaultRound,
    required this.rounds,
  });

  final String copyright;
  final int id;
  final String name;
  final String season;
  final int defaultRound;
  final List<RoundElement> rounds;

  factory Playoffs.fromRawJson(String str) =>
      Playoffs.fromJson(json.decode(str));

  String toRawJson() => json.encode(toJson());

  factory Playoffs.fromJson(Map<String, dynamic> json) => Playoffs(
        copyright: json["copyright"],
        id: json["id"],
        name: json["name"],
        season: json["season"],
        // defaultRound is not found in API calls for playoffs before 2012
        defaultRound:
            (json["defaultRound"] == null) ? -1 : json["defaultRound"],
        rounds: List<RoundElement>.from(
            json["rounds"].map((x) => RoundElement.fromJson(x))),
      );

  Map<String, dynamic> toJson() => {
        "copyright": copyright,
        "id": id,
        "name": name,
        "season": season,
        "defaultRound": defaultRound,
        "rounds": List<dynamic>.from(rounds.map((x) => x.toJson())),
      };
}
